version: '3.8'

services:
  app:
    build: .
    container_name: learning-service-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      # MySQL 연결 (db 컨테이너)
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/learning_service_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&maxReconnects=10
      - SPRING_DATASOURCE_USERNAME=learning_user
      - SPRING_DATASOURCE_PASSWORD=1234
      # Redis 연결 (redis 컨테이너) - 학습 세션 캐싱용
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      # Kafka 연결 (kafka 컨테이너) - 학습 이벤트 스트리밍용 (선택적)
      # - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - db
      - redis
      # - kafka
    networks:
      - learning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  db:
    image: mysql:8.0
    container_name: learning-service-mysql
    environment:
      - MYSQL_DATABASE=learning_service_db
      - MYSQL_USER=learning_user
      - MYSQL_PASSWORD=1234
      - MYSQL_ROOT_PASSWORD=1234
      - MYSQL_ROOT_HOST=%
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./DB-scripts:/docker-entrypoint-initdb.d
    networks:
      - learning-network
    restart: unless-stopped
    command: >
      --default-authentication-plugin=mysql_native_password
      --bind-address=0.0.0.0
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: learning-service-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - learning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: learning-service-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    networks:
      - learning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: learning-service-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - learning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx 웹 서버 및 로드 밸런서
  nginx:
    image: nginx:alpine
    container_name: learning-service-nginx
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS (선택사항)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/html:/usr/share/nginx/html:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - learning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mysql_data:
  redis_data:

networks:
  learning-network:
    driver: bridge


#docker run --rm -it --network demo_learning-network mysql:8.0 mysql -h db -u root -p1234